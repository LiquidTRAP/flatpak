From: Matthias Clasen <mclasen@redhat.com>
Date: Sun, 26 Aug 2018 22:20:04 -0400
Subject: Save a pid for running sandboxes

Store the pid of the bwrap process which gets spawned or exec'ed
by flatpak inside the instance directory. This can be useful
for others, such as gnome-software, or a future 'flatpak ps'
command.

We write the pid to a file named 'pid'. It will get cleaned
up together with the instance directory.

Closes: #2023
Approved by: alexlarsson

(cherry picked from commit 95e5b394c2d41e540e23675d51813c1d1c84c34f)
---
 app/flatpak-builtins-build.c |  1 +
 common/flatpak-run-private.h |  1 +
 common/flatpak-run.c         | 24 ++++++++++++++++++++++--
 3 files changed, 24 insertions(+), 2 deletions(-)

diff --git a/app/flatpak-builtins-build.c b/app/flatpak-builtins-build.c
index 8372501..58c08e3 100644
--- a/app/flatpak-builtins-build.c
+++ b/app/flatpak-builtins-build.c
@@ -532,6 +532,7 @@ flatpak_builtin_build (int argc, char **argv, GCancellable *cancellable, GError
                                       app_id_dir, app_context, NULL,
                                       FALSE, TRUE,
                                       &app_info_path,
+                                      NULL,
                                       error))
     return FALSE;
 
diff --git a/common/flatpak-run-private.h b/common/flatpak-run-private.h
index e8b7079..217f1a5 100644
--- a/common/flatpak-run-private.h
+++ b/common/flatpak-run-private.h
@@ -157,6 +157,7 @@ gboolean flatpak_run_add_app_info_args (FlatpakBwrap   *bwrap,
                                         gboolean        sandbox,
                                         gboolean        build,
                                         char          **app_info_path_out,
+                                        char          **host_instance_id_host_dir_out,
                                         GError        **error);
 
 gboolean flatpak_run_app (const char     *app_ref,
diff --git a/common/flatpak-run.c b/common/flatpak-run.c
index d69805e..eb685fd 100644
--- a/common/flatpak-run.c
+++ b/common/flatpak-run.c
@@ -1685,6 +1685,7 @@ flatpak_run_add_app_info_args (FlatpakBwrap   *bwrap,
                                gboolean        sandbox,
                                gboolean        build,
                                char          **app_info_path_out,
+                               char          **instance_id_host_dir_out,
                                GError        **error)
 {
   g_autofree char *info_path = NULL;
@@ -1845,6 +1846,9 @@ flatpak_run_add_app_info_args (FlatpakBwrap   *bwrap,
   if (app_info_path_out != NULL)
     *app_info_path_out = g_strdup_printf ("/proc/self/fd/%d", fd);
 
+  if (instance_id_host_dir_out != NULL)
+    *instance_id_host_dir_out = g_steal_pointer (&instance_id_host_dir);
+
   return TRUE;
 }
 
@@ -2828,6 +2832,7 @@ flatpak_run_app (const char     *app_ref,
   g_auto(GStrv) runtime_parts = NULL;
   int i;
   g_autofree char *app_info_path = NULL;
+  g_autofree char *instance_id_host_dir = NULL;
   g_autoptr(FlatpakContext) app_context = NULL;
   g_autoptr(FlatpakContext) overrides = NULL;
   g_autoptr(FlatpakExports) exports = NULL;
@@ -3040,7 +3045,7 @@ flatpak_run_app (const char     *app_ref,
                                       app_ref_parts[1], app_ref_parts[3],
                                       runtime_ref, app_id_dir, app_context, extra_context,
                                       sandboxed, FALSE,
-                                      &app_info_path, error))
+                                      &app_info_path, &instance_id_host_dir, error))
     return FALSE;
 
   if (!sandboxed && !(flags & FLATPAK_RUN_FLAG_NO_DOCUMENTS_PORTAL))
@@ -3096,17 +3101,32 @@ flatpak_run_app (const char     *app_ref,
 
   if ((flags & FLATPAK_RUN_FLAG_BACKGROUND) != 0)
     {
+      GPid child_pid;
+      char pid_str[64];
+      g_autofree char *pid_path = NULL;
+
       if (!g_spawn_async (NULL,
                           (char **) bwrap->argv->pdata,
                           bwrap->envp,
                           G_SPAWN_SEARCH_PATH,
                           flatpak_bwrap_child_setup_cb, bwrap->fds,
-                          NULL,
+                          &child_pid,
                           error))
         return FALSE;
+
+      g_snprintf (pid_str, sizeof (pid_str), "%" G_PID_FORMAT, child_pid);
+      pid_path = g_build_filename (instance_id_host_dir, "pid", NULL);
+      g_file_set_contents (pid_path, pid_str, -1, NULL);
     }
   else
     {
+      char pid_str[64];
+      g_autofree char *pid_path = NULL;
+
+      g_snprintf (pid_str, sizeof (pid_str), "%" G_PID_FORMAT, getpid ());
+      pid_path = g_build_filename (instance_id_host_dir, "pid", NULL);
+      g_file_set_contents (pid_path, pid_str, -1, NULL);
+
       /* Ensure we unset O_CLOEXEC */
       flatpak_bwrap_child_setup_cb (bwrap->fds);
       if (execvpe (flatpak_get_bwrap (), (char **) bwrap->argv->pdata, bwrap->envp) == -1)
